name: Enforce Release Process

on:
  pull_request:
    branches: [main]
    paths: ['package.json']
  push:
    branches: [main]
    paths: ['package.json']

jobs:
  check-release-process:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed in package.json
        id: version-check
        run: |
          # Get the version from current commit
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          
          # Get the version from previous commit (if exists)
          if git show HEAD~1:package.json > /dev/null 2>&1; then
            PREVIOUS_VERSION=$(git show HEAD~1:package.json | node -p "JSON.parse(require('fs').readFileSync('/dev/stdin', 'utf8')).version")
          else
            PREVIOUS_VERSION=""
          fi
          
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "previous-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && [ -n "$PREVIOUS_VERSION" ]; then
            echo "version-changed=true" >> $GITHUB_OUTPUT
          else
            echo "version-changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Check if commit was made by release-it
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          EXPECTED_PATTERN="chore: release v${{ steps.version-check.outputs.current-version }}"
          
          echo "Current commit message: $COMMIT_MESSAGE"
          echo "Expected pattern: $EXPECTED_PATTERN"
          
          if [ "$COMMIT_MESSAGE" != "$EXPECTED_PATTERN" ]; then
            echo "‚ùå ERROR: Version change detected but commit was not made by release-it!"
            echo ""
            echo "üö´ Manual version bumps are not allowed."
            echo "üìã Please use one of these commands instead:"
            echo "   ‚Ä¢ bun run release        (patch version)"
            echo "   ‚Ä¢ bun run release:minor  (minor version)" 
            echo "   ‚Ä¢ bun run release:major  (major version)"
            echo ""
            echo "‚ÑπÔ∏è  Release-it will automatically:"
            echo "   - Update package.json version"
            echo "   - Create proper commit message"
            echo "   - Create Git tag"
            echo "   - Create GitHub release"
            echo "   - Publish to npm"
            echo "   - Update CHANGELOG.md"
            echo ""
            exit 1
          else
            echo "‚úÖ Version change was made by release-it. Good job!"
          fi

      - name: Check if tag exists for version
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          VERSION="v${{ steps.version-check.outputs.current-version }}"
          
          # Check if tag exists
          if ! git tag -l | grep -q "^${VERSION}$"; then
            echo "‚ùå ERROR: No tag found for version $VERSION"
            echo ""
            echo "üö´ All releases must have corresponding Git tags."
            echo "üìã Please use release-it which creates tags automatically:"
            echo "   ‚Ä¢ bun run release"
            echo ""
            exit 1
          else
            echo "‚úÖ Tag $VERSION exists. Good job!"
          fi

      - name: Success message
        if: steps.version-check.outputs.version-changed == 'true'
        run: |
          echo "üéâ Release process validation passed!"
          echo "üì¶ Version: ${{ steps.version-check.outputs.current-version }}"
          echo "‚úÖ Proper commit message format"
          echo "‚úÖ Git tag exists"
          echo "‚úÖ Release was created using release-it"